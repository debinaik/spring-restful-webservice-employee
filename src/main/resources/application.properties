# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
#spring.datasource.url = jdbc:sqlite:\\D:\\sqlite\\backLogDB.db

# Local Environment Setup
spring.datasource.url= jdbc:postgresql://localhost:5432/trainingDB

# Username and password
# Local Environment Setup
spring.datasource.username = postgres
spring.datasource.password = postgres

# GE Predix Environment Setup
#spring.datasource.url= jdbc:postgresql://10.72.6.143:5432/db0109f673adf4067b2a62a3be53d2a88


# GE Predix Environment Setup
#spring.datasource.username = ub7ce61a57b81482a8822b04896676dc1
#spring.datasource.password = c56d5de01bb444c680c1de2cbe3d8173

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql=false
spring.jpa.jpaVendorAdapter = org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto= update
# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.SQLiteDialect

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL82Dialect